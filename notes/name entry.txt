todo:

* title graphic
* floating start graphic
X make it start on english page
X remove other pages
X remove floating arrows
  (alternately: add lowercase, if we decide to for whole game)
* change default name (chi-ya-n-pu = CHAMP)
* change KA*SU*MI cheat (* = heart)
  * kasumi means mist, MIST*?
  * RHDN* or ROMH*
  * H*A*X (normmatt's idea)
  * CHEAT
  * CHAMP - nope, this is the default name
* confirm menu


kasumi cheat:

"ka heart su heart mi" is stored at 080695b4 (normmatt)


8018070 - copies katakana tiles (decompresses)
80180A0 - " but ABC
8018042 - " hirigana
8066758 - lz77decomp routine

2001554 - timer for arrow switching

8002662 - read keypad
200c850 - key stuff
200c85c - if certain key pressed (2 bytes)
 I think this is B, 5a is A, 5e is select, etc
 200c86a = R, 200c86c = L
  bp on read only breaks when these pressed
  (yet value is zero...)

8002696 R is pressed, only seems to be used in checking keys

---

80652D4 - run when screen changed (L or R)
 r1 = 200 if L 100 if R

3002a60 - seems to be important block of memory
30005b0
2002702 - 8017FF4 sets this to 1
20015AC - if not 0, dec
^ this controls which graphics it copies!

yes, 20015AC: 00 = hirigana, 01 = katakana, 02 = ABC
it's used to tell what letter to type, but changing it doesnt update graphics

initialized to 00 when screen is loaded (nothing sets it)
first read at 8017476
 stores something in 200257C
 changing it to 02 right here affects everything but tile graphics (eg. arrows, and what you type)

6006C00 - tile graphics
 initially copied at 80178E4
 r0 = 8276494 (82779C4 = ABC graphics)
  cant just change this, tilemap is all weird (same as if kana)
 map at 6000800, ABC = 83848FC, kana = 8384420 (for both)
  change 801793A

---

to make it start on ABC input:

80178E0: ldr r0,=0x82779C4 ;change hirigana tiles to ABC tiles
 (addr at 8017AD4)
801793A: ldr r0,=0x83848FC ;same as above with tilemap
 (addr at 8017B04)

make it type ABC when 20015AC=00
 801814C - maybe just change to mov r2, 02
  yes, this works fine

disable L and R keys:
 L - 8017FF8
 R - 8018016
 both - 8018028
 called at 80652D4
  8017FE0 = bl 80652D4
   nopping doesnt disable (so wrong thing)
note: some of changes so far broke arrows changing

 8018024 only breaks when changing pages to the right
  add, where it increments page
 20017A2 important?
 8018008 r5 = 01 if switching right, -1 if left
 8018004 sub, where it decrements page
 8017FD8 where it sets r5
 8017FDC jumps if r5=0
  make this always jump to disable page changing

get rid of arrow graphics:

OAM 7000010
oam buffer at 200B8C8
200B8D8
 from 20029F4 (this addr changes) 20021A0
  y-pos stored at 80018C4
  x is in r7, 80018b2
  80015AC, calls 8001650 = sprite setup routine
   calls for every sprite
   20029A4 = r0 for R arrow txt
    initialized at 8017c58
     maybe that's the wrong one? nop'ing this makes txt not show up but arrows still show up
     8067780 - sprite shapes ?
  this = (r0 in 8001650) + 50 (20021A0 = 2002150)
   ^ change 4th byte to 0 disables sprite
   to find this addr, bp 200B8D8, its r5

2002484 (changes) - addr of L arrow txt
 only written when initialized, never again
20023E0 = L background (bp [200B8e0]!!)

80015A4 - r4 is sprite, gets from r0
 r0s: 200C030 200C178 200C1A0 200C1C8
 (these dont change)
 only 200C178 and 200C1C8 lead to L background sprite
 (sprite base+40 = addr of next sprite in that list)
 200C178 points to L arrw txt sprite
 200C1C8 is floating start sprite

find how 200C178 is initialized
 80014DE every frame

there's gotta be a better way to find this... I hate debugging sprite drawing code. maybe use IDA?

8000FE8

8001650 = display sprite? (noping gets rid of all sprites)

sprite structure:
+00	command word? (02000000 = typical, 01000000 and 	00000000 go to another routiner)
+44	(used in 8000150c routine, 8001558 to be exact)
	passed to 80014C0 routine (often 0x50?)
	<<3 and added to 200BF48 (oam buffer)
	oam buffer offset?
+48	x-pos
+4C	y-pos
+50-56	OAM attributes
+51	in [sp+10] (0x20 shifted to 00)
+52	0x4030
+53	in r10 - shape? (0x40 shifted to 04)
	shape, used in OAM attrib 1
+74	(added to x-pos?)
+78	(added to y-pos?)
+8E	at 800183E, r7 = +48 - this (x-pos offset)
+90	y-pos offset

at 8001886, r4 and r6 = width + height?

at 80018BA masks +52 with 1111111000000000
 keeps size/rotation stuff, uses new x-position

200c848 - which oam sprite is being setup in 8001650

8001650 = OamSetup - copies sprite from sprite table to oam buffer

---

if 8000FF4 is nop'd, sprites no longer update (but do display)

8001588:
200BF48-200C048 is a bunch of pointers to sprite data
 (mainly zeros though, only the ones updated that frame?)
it loops through that whole area and updates/displays those sprites

matt: 800150C looks like it puts the pointers in that area
800150C:
 200b880 10*4 byte table, linked list of sprites
  entry 01 (200b884) = all the sprites but champ
  entry 02 = champ
 r4 = 2001480
 whole first part of RAM involved (2000000, 2000150, etc)
  2000150 = entry 01 sprites?
   initialized 800118c
  2001E1C (stored at 2000150) = data for it?

linked list in question:
2001E1C, 2001D78, 20018FC, 20019A0, 2001CD4, 2001C30, 2001A44, 2001B8C, 2001AE8, 20017B4, 2001710, 200166C, (20001EC)

20018FC	L-arrow bg (from 2001D80 in prev sprite)
20019A0 L-arrow txt
2001CD4 R-arrow bg
2001C30 R-arrow txt

[2001D80]!!
 8001238
  from 8001266 - seems to be responsible for clearing past sprites (and initializing new ones?)

800122e: 200B8C0 - seems important

8016DA0 calls 800127c
 clears sprites, but only on name entry screen!
 20015B6 is incremented
  palettes? (seems to be involved in blacking/fading)
 was called from 80011ee
  which just bx's to r1
  from the 80011A0 call at 8000FF0
 8016DC6 - stores 8002539 in 3000EB0 (important?)
 3000BE8 is zero'd (4 bytes)
 3000EE8 is zero'd (1 byte)
 r6+30 (2001524+30) is zero'd (3 bytes)

20015b6 - (after being inc from 65 to 66 after above)
 first read from at 80167FA (routine start 80167E4)
 goes to 8016E04 when exactly 66
  loads from r6+30 (r6 still 2001524), increments it
 if change this to 66 on file select screen, everything changes to name entry screen, but sprites messed up
 change it to 65, loads name entry perfectly

80167E4 - involved with updating screen
8016D80 - when 20015b6 = 65
 2001554 = old screen fading out timer

note: I don't think sprites are loaded in 8016D80 :-/
 if its never allowed to jump here, sprites still get loaded (screen is messed up though) - find where 65 gets written, it's probably in the same spot they get written

8015BEA, 64 written to 20015b6
 note: looks like 64/65/66 are involved in screen switching in general, but not just file select->name entry - also backwards, and to other parts of game

8015BEA only on exit from file select BUT also to saved games (getting warmer?)
 if 64 store is nop'd, screen does not change
 r6=2002008 seems to control some stuff [value changes]
  +4C - which file selected (set to 200C9AE)
  +38 - 2001524 (adds 92 to get 20015b6)
 200C9AE - if 01 goes to name entry, if 00 goes into game
  actually just which file you chose
 20015B8 is zerod (8015bf2)
 this routine comes from 80011ee too
  (just a bx routine)
 note: if everything before this runs, but 8015BD8 is nop'd, screen doesn't change
  note: this all has to do with 64 though, if that is nop'd and 64 manually set, screen still changes

8016D3C = when 64
 30028D0
 8016D5e - call irrelevant, nop'd still changes screen

note: 65 must just clear old graphics, because skip 65 (64->66) works with some added gibberish

66 = most important?
 8016E04
  stores 200C9AE (which file chosen) in 200C9A9
 200CA0C
 2001512 +=2 (at 8016E70)
 calls 8001214 (which i had called clear_sprite)
  if this nop'd, infinite loop, this = the magic?
  8001232 (a few important strs?)
   crashes if data here is zerod out
   ditto if only first one is zerod
    stores 2001e1c in 2001530
    this read only once, at 8001152, and stored in 200B8C0

200B8C0 is what matters?
 seems to be written everytime a sprite created (and destroyed?)

writes after 66 routine:

2001524
20015C8 at 8001154
2002B90 - first enabled sprite (press start bubble)
2001EC0 - L button BG
200166C
2001A44
2001C30
2001CD4
20019A0
2001710
20017B4
2001AE8
2001B8C
20018FC
2001D78

8001154 seems to be involved in initializing sprite!
 called from 8017A12
  struck gold? nop'ing this gets rid of start bubble

rom addr loaded at 80011e8

8017A96: left arrow initialize!
 if r0 arg = 0, sprites still shown, but dont move (no x/y pos set, no animation)
 (note this is called twice - both arrows?)
 if r1 always=0, creates duplicate L arrow and text moves independantly (linkage value?)
  if set to 2, makes R arrow txt move independently too
   (amount of sprites to make follow that anim?)

woot: just nop that call and arrows disappear!
(that took waaay too long to find)

8001148 = create sprite, btw