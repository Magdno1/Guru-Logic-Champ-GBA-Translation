text is in OAM sprites:

6015800
 from 82EB052 (probably font), RLUnComp
 at 80244C8
 
80244B4, r0 is character being printed
 call right before this converts r0 from SJS to simple char code

802451A, r1 is char, loaded from r0

first txt at 806B0A4

---

figuring out control codes:

<$65><$65>:

occurs at 806B0C0

6565 seems like a long pause
6C6C seems like a short pause

6565 is always followed by 0000, 0000 is never read by the game...

pointer in 20019B4

call checks if 6565 or 6c6c
then 4081

---

finding why no english font:

80244B0 is where it converts the SJIS character to the font number
every english character returns F3
which is the dot

char<<10>>0e = char*4
added to 82F0A44 = ptr table of RL compressed character data
F3 ptr at 82F0E10
ptr table only goes up to FF

00 = a
01 = i
etc.
(spaces aren't printed)

note: all BG maps are used (bg1 in front), would probably be easier to just do OAM vwf, if it comes to that

--- notes for font dumping ---
RLUncompVram

  r0  Source Address, pointing to data as such:
       Data header (32bit)
         Bit 0-3   Reserved
         Bit 4-7   Compressed type (must be 3 for run-length)
         Bit 8-31  Size of decompressed data
       Repeat below. Each Flag Byte followed by one or more Data Bytes.
       Flag data (8bit)
         Bit 0-6   Expanded Data Length (uncompressed N-1, compressed N-3)
         Bit 7     Flag (0=uncompressed, 1=compressed)
       Data Byte(s) - N uncompressed bytes, or 1 byte repeated N times

good explanation of decompression: http://d.hatena.ne.jp/loveemu/20091002/nds_formats

a character: 082EACC4, ends at: 82EAD2A

--- font design notes ---

characters are generally 12x12, one pixel of space at the top
 some are smaller, none seem to be wider, some kanji are 13 high